name: Build and Push Docker Image

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: docker.io
  IMAGE_NAME: delayj/jimdel # Replace with your Docker Hub username & image name

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Fetch all history for proper versioning

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Generate semver
        id: semver
        run: |
          if [[ $GITHUB_REF == refs/tags/v* ]]; then
            # If this is a tag push, use the tag
            VERSION=${GITHUB_REF#refs/tags/}
            echo "Using tag version: $VERSION"
          else
            # Generate version using format 1.{BUILD_NUMBER}.0
            BUILD_NUMBER=${{ github.run_number }}
            VERSION="1.${BUILD_NUMBER}.0"
            echo "Generated version: $VERSION"
          fi
          
          # Set the version for outputs
          echo "version=v$VERSION" >> $GITHUB_OUTPUT
          echo "semver=$VERSION" >> $GITHUB_OUTPUT
          echo "Final semver: $VERSION"

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=${{ steps.semver.outputs.semver }}
            type=raw,value=latest,enable={{is_default_branch}}
            type=ref,event=pr

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max